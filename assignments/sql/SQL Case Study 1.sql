select * from Fact;
select * from Location;
select * from Product;

/*1. Display the number of states present in the LocationTable.*/
SELECT DISTINCT State FROM Location;

/*2. How many products are of regular type?*/
SELECT COUNT(*) FROM Product WHERE Type='Regular';

/*3. How much spending has been done on marketing of product ID 1?*/
SELECT SUM(f.Marketing)
FROM Fact f, Product p
WHERE f.ProductId = p.ProductId and p.ProductId = 1;


/*4. What is the minimum sales of a product?*/
SELECT p.ProductId, p.Product, MIN(f.Sales) MinSales
FROM Fact f, Product p
WHERE f.ProductId = p.ProductId 
GROUP BY p.ProductId, p.Product;

/*5. Display the max Cost of Good Sold (COGS). */
SELECT p.ProductId, p.Product, Max(f.COGS) MaxCost
FROM Fact f, Product p
WHERE f.ProductId = p.ProductId 
GROUP BY p.ProductId, p.Product;

/*6. Display the details of the product where product type is coffee. */
SELECT *
FROM Fact f, Product p
WHERE f.ProductId = p.ProductId AND p.Product_Type = 'Coffee';

/*7. Display the details where total expenses are greater than 40. */
SELECT * FROM Fact WHERE Total_Expenses > 40;

/*8. What is the average sales in area code 719?*/
SELECT AVG(f.Sales)
FROM Fact f, Location l
WHERE F.Area_Code = l.Area_Code AND l.Area_Code = 719;

/*9. Find out the total profit generated by Colorado state*/
SELECT SUM(f.Profit)
FROM Fact f, Location l
WHERE F.Area_Code = l.Area_Code AND l.State = 'Colorado';

/*10. Display the average inventory for each product ID.*/
SELECT p.ProductId, AVG(f.Inventory)
FROM Fact f, Product p
WHERE f.ProductId = p.ProductId
GROUP BY p.ProductId;

/*11. Display state in a sequential order in a Location Table. */
SELECT DISTINCT State FROM Location ORDER BY State;

/*12. Display the average budget of the Product where the average budget margin should be greater than 100.*/
SELECT p.ProductId, Product, AVG(f.Budget_Sales)
FROM Fact f, Product p
WHERE f.ProductId = p.ProductId AND  f.Budget_Margin > 100
GROUP BY p.ProductId, Product;

/*13. What is the total sales done on date 2010-01-01?*/
SELECT SUM(Sales) FROM Fact WHERE Date = '2010-01-01';

/*14. Display the average total expense of each product ID on an individual date. */
SELECT ProductId, Date, AVG(Total_Expenses)
FROM Fact
GROUP BY ProductId, Date
ORDER BY ProductId, Date;

/*15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code. */
SELECT f.Date, p.ProductId, p.Product_Type, p.Product, f.Sales, f.Profit, l.State, l.Area_Code
FROM Fact f, Product p, Location l
WHERE f.ProductId = p.ProductId AND f.Area_Code = l.Area_Code;

/*16. Display the rank without any gap to show the sales wise rank. */
SELECT RANK() OVER( ORDER BY Sales DESC) as RankNo, f.* FROM Fact f;

/*17. Find the state wise profit and sales.*/
SELECT l.State, SUM(Sales) TotalSales, SUM(Profit) TotalProfit
FROM Fact f, Location l
WHERE f.Area_Code = l.Area_Code
GROUP BY l.State;

/*18. Find the state wise profit and sales along with the productname. */
SELECT l.State, p.Product, SUM(Sales) TotalSales, SUM(Profit) TotalProfit
FROM Fact f, Location l, Product p
WHERE f.Area_Code = l.Area_Code AND f.ProductId = p.ProductId
GROUP BY l.State, p.Product;

/*19. If there is an increase in sales of 5%, calculate the increasedsales. */
SELECT f.*, (f.Sales + (f.Sales * 0.05)) IncreasedSales
FROM Fact f;

/*20. Find the maximum profit along with the product ID and producttype. */
SELECT p.ProductId, p.Product_Type, MAX(f.Profit) MaxProfit
FROM Fact f, Product p
WHERE f.ProductId = p.ProductId
GROUP BY p.ProductId, p.Product_Type;

/*21. Create a stored procedure to fetch the result according to the product type from Product Table. */

CREATE or ALTER FUNCTION dbo.FetchProduct(@productType VARCHAR)
RETURNS TABLE
RETURN(
	SELECT f.*
	FROM Fact f, Product p
	WHERE f.ProductId = p.ProductId and p.Product_Type = @productType
);


/* 22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss. */
SELECT f.*, CASE 
				WHEN f.Total_Expenses < 60 THEN 'Profit'
				ELSE 'Loss'
			END ProfitOrLoss
FROM Fact f;

/*23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order. */

SELECT 
    Date, ProductId, SUM(Sales) TotalSales
FROM
    Fact f
GROUP BY ROLLUP (Date, ProductId);

/*24. Apply union and intersection operator on the tables which consist of attribute area code. */

SELECT Area_Code FROM Fact
UNION
SELECT Area_Code FROM Location;

SELECT Area_Code FROM Fact
INTERSECT
SELECT Area_Code FROM Location;

/*25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference. */
CREATE or ALTER FUNCTION dbo.FetchProduct(@productType VARCHAR)
RETURNS TABLE
RETURN(
	SELECT f.*
	FROM Fact f, Product p
	WHERE f.ProductId = p.ProductId and p.Product_Type = @productType
);


/*26. Change the product type from coffee to tea where product ID is 1 and undo it. */

BEGIN TRANSACTION;
UPDATE Product
SET Product_Type = 'Tea'
WHERE ProductId = '1';

SELECT *
FROM Product
WHERE ProductId = '1';

ROLLBACK;

SELECT *
FROM Product
WHERE ProductId = '1';

/*27. Display the date, product ID and sales where total expenses are between 100 to 200. */
SELECT Date, ProductId, Sales 
FROM Fact
WHERE Total_Expenses BETWEEN 100 AND 200;

/*28. Delete the records in the Product Table for regular type. */

DELETE FROM Product
WHERE Type = 'Regular';

/*29. Display the ASCII value of the fifth character from the column Product*/
SELECT p.*, ASCII(SUBSTRING(Product, 5, 1)) FROM Product p

